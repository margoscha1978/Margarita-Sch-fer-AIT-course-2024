Потоки Streams:

Входные потоки:
InputStream
Reader

Исходящие потоки:
OutputStream
Writer

Виды потоков
Байтовые: переносят информацию в виде байтов это изображения видео аудио архивы.
Методы:
 - InputStream подбирает метод для чтения
 - read() читает побайтно и возвращает информацию как число в байте от 0 до 255 как число
   или -1 если попали в конец потока 255
 - read(byte[]byteArray) считывает массив байтов
 - close() закрываем поток
 - OutputStream определяет метод для записи информации
 - write() записывает один байт integer byte
 - write(byte[] array) записывает и передает массив из байтов
 - close() закрываем поток что бы не смешивались файлы
Классы:
 - FileInputStream / FileOutputStream читаем файлы из файлов в байтах,чаще всего интерфейсы
 - ByteArrayInputStream / ByteArrayOutputStream читаем массивы
 - BufferedInputStream / BufferedOutputStream класс обертка,помогает обрабатывать информацию в больших объемах,
   буфер,считывает и обрабатывает поток информации блоками и быстро и безопасно,
   частично защищает от потери данных - потеряется только читаемый блок,который находится в обработке.
 - DataInputStream / DataOutputStream настройка для чтения записи примитивных типов:
   integer,double и строк кодировки UTF...

Символьные: передают строки и символы это текстовая работа с учетом кодировки.
Методы:
 - Reader абстрактный класс для чтения символов
 - read() читает один символ
 - read(char[]charArray) считывает массив символов
 - close() закрываем поток
 - Writer используется для записи символов
 - write() записывает один символ
 - write(char[] array) записывает и передает массив символов
 - close() закрываем поток что бы не смешивались файлы
Классы:
 - FileReader / FileWriter чтение и запись файлов и символов
 - BufferReader / BufferWriter буферизация и защита информации при обработке больших потоков
 - InputStreamReader / OutputSteamReader мост между байтами и символами,обработка потоков и их трансформация
 - PrintWriter: удобный класс для форматированного вывода (print, println, printf).

Декораторы - паттерн(pattern) в Java: продолжение буферизации,классы обертки в обертке...
Сериализация Serializer это преобразование объекта в последовательность байтов ObjectOutputStream.
Де-сериализация Deserializer это восстановление объектов из полученной от сериализации байтов ObjectInputStream.
Serializable работает в интерфейсе.

Для сериализации:
 - файл защищен для открытия нужен де-сериализатор,который в свое время сохраняет
   защищенные данные(transient) - пароль например.
 - реализовывать в классе Serializable.
 - поля которые не нужно трансформировать помечаем аннотацией transient.
 - рекомендуется работа с конструктором и toString.
 - close закрытие обязательно.
 - обработка исключений - exception( ) обязательна.
 - логирование улучшит контроль и управление программой.
 - часто используют для создания резервных копий или передачи сохраненных данных кому то...